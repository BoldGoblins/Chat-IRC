const express = require('express');
const http = require('http');
const socketIO = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIO(server);

const port = process.env.PORT || 3000

// Custom Functions
const {generateMessage} = require("./server/utils/message");
const {isRealString} = require("./server/utils/isRealString");
const {Users} = require("./server/utils/users");
///

// Var
let users = new Users();
///

app.use(express.static('public'));

app.get('/', (req, res) => {
    res.sendFile(`${__dirname}/public/index.html`)
})

io.on('connection', (socket) => {
    console.log('Client connected')

    socket.on("disconnect", () => {
        console.log("Client disconnected")
        let user = users.removeUser(socket.id);

        if(user){
            io.to(user.room).emit("updateUserList", users.getUserList(user.room));
            io.to(user.room).emit("newMessage", generateMessage("Room", `${user.name} has left ${user.room}.`))
        }
    })

    socket.on("create message", (msg, callback) => {
        let user = users.getUser(socket.id);

        if(user && isRealString(msg.text)){
            io.to(user.room).emit("new message", generateMessage(user.name, msg.text));
        }
        
        callback();

    })

    socket.on("join", (params, callback) => {
        if(!isRealString(params.name) || !isRealString(params.room)) {
            return callback("Name and room are required");
        }

        socket.join(params.room);

        users.removeUser(socket.id);
        users.addUser(socket.id, params.name, params.room);

        io.to(params.room).emit("updateUsersList", users.getUserList(params.room));

        socket.emit("new message", generateMessage("Room", `Welcome to ${params.room}!`));

        socket.broadcast.to(params.room).emit("new message", generateMessage("Room", `New User named ${params.name} Joined..`));

        callback();

    })
})

server.listen(port, () => {
    console.log(`Server is up on port ${port}`);
})